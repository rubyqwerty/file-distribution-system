/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace distribution_service
{

  public partial class Replication : TBase
  {
    private global::distribution_service.Chunk _chunk;
    private int _idServer;

    public global::distribution_service.Chunk Chunk
    {
      get
      {
        return _chunk;
      }
      set
      {
        __isset.@chunk = true;
        this._chunk = value;
      }
    }

    public int IdServer
    {
      get
      {
        return _idServer;
      }
      set
      {
        __isset.idServer = true;
        this._idServer = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool @chunk;
      public bool idServer;
    }

    public Replication()
    {
    }

    public Replication DeepCopy()
    {
      var tmp5 = new Replication();
      if((Chunk != null) && __isset.@chunk)
      {
        tmp5.Chunk = (global::distribution_service.Chunk)this.Chunk.DeepCopy();
      }
      tmp5.__isset.@chunk = this.__isset.@chunk;
      if(__isset.idServer)
      {
        tmp5.IdServer = this.IdServer;
      }
      tmp5.__isset.idServer = this.__isset.idServer;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Chunk = new global::distribution_service.Chunk();
                await Chunk.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                IdServer = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp6 = new TStruct("Replication");
        await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
        var tmp7 = new TField();
        if((Chunk != null) && __isset.@chunk)
        {
          tmp7.Name = "chunk";
          tmp7.Type = TType.Struct;
          tmp7.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await Chunk.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.idServer)
        {
          tmp7.Name = "idServer";
          tmp7.Type = TType.I32;
          tmp7.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteI32Async(IdServer, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Replication other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.@chunk == other.__isset.@chunk) && ((!__isset.@chunk) || (global::System.Object.Equals(Chunk, other.Chunk))))
        && ((__isset.idServer == other.__isset.idServer) && ((!__isset.idServer) || (global::System.Object.Equals(IdServer, other.IdServer))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Chunk != null) && __isset.@chunk)
        {
          hashcode = (hashcode * 397) + Chunk.GetHashCode();
        }
        if(__isset.idServer)
        {
          hashcode = (hashcode * 397) + IdServer.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp8 = new StringBuilder("Replication(");
      int tmp9 = 0;
      if((Chunk != null) && __isset.@chunk)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Chunk: ");
        Chunk.ToString(tmp8);
      }
      if(__isset.idServer)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("IdServer: ");
        IdServer.ToString(tmp8);
      }
      tmp8.Append(')');
      return tmp8.ToString();
    }
  }

}
