/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace distribution_service
{
  public partial class DistributionService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task MakeReplications(int idMetadata, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task MakeReplications(int idMetadata, CancellationToken cancellationToken = default)
      {
        await send_MakeReplications(idMetadata, cancellationToken);
        await recv_MakeReplications(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MakeReplications(int idMetadata, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MakeReplications", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp0 = new InternalStructs.MakeReplications_args() {
          IdMetadata = idMetadata,
        };
        
        await tmp0.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_MakeReplications(CancellationToken cancellationToken = default)
      {
        
        var tmp1 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1.Type == TMessageType.Exception)
        {
          var tmp2 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2;
        }

        var tmp3 = new InternalStructs.MakeReplications_result();
        await tmp3.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["MakeReplications"] = MakeReplications_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task MakeReplications_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp4 = new InternalStructs.MakeReplications_args();
        await tmp4.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp5 = new InternalStructs.MakeReplications_result();
        try
        {
          await _iAsync.MakeReplications(tmp4.IdMetadata, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MakeReplications", TMessageType.Reply, seqid), cancellationToken); 
          await tmp5.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp6)
        {
          var tmp7 = $"Error occurred in {GetType().FullName}: {tmp6.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp6, tmp7);
          else
            Console.Error.WriteLine(tmp7);
          var tmp8 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MakeReplications", TMessageType.Exception, seqid), cancellationToken);
          await tmp8.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class MakeReplications_args : TBase
      {
        private int _idMetadata;

        public int IdMetadata
        {
          get
          {
            return _idMetadata;
          }
          set
          {
            __isset.idMetadata = true;
            this._idMetadata = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool idMetadata;
        }

        public MakeReplications_args()
        {
        }

        public MakeReplications_args DeepCopy()
        {
          var tmp9 = new MakeReplications_args();
          if(__isset.idMetadata)
          {
            tmp9.IdMetadata = this.IdMetadata;
          }
          tmp9.__isset.idMetadata = this.__isset.idMetadata;
          return tmp9;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    IdMetadata = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp10 = new TStruct("MakeReplications_args");
            await oprot.WriteStructBeginAsync(tmp10, cancellationToken);
            var tmp11 = new TField();
            if(__isset.idMetadata)
            {
              tmp11.Name = "idMetadata";
              tmp11.Type = TType.I32;
              tmp11.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp11, cancellationToken);
              await oprot.WriteI32Async(IdMetadata, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MakeReplications_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.idMetadata == other.__isset.idMetadata) && ((!__isset.idMetadata) || (global::System.Object.Equals(IdMetadata, other.IdMetadata))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.idMetadata)
            {
              hashcode = (hashcode * 397) + IdMetadata.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp12 = new StringBuilder("MakeReplications_args(");
          int tmp13 = 0;
          if(__isset.idMetadata)
          {
            if(0 < tmp13++) { tmp12.Append(", "); }
            tmp12.Append("IdMetadata: ");
            IdMetadata.ToString(tmp12);
          }
          tmp12.Append(')');
          return tmp12.ToString();
        }
      }


      public partial class MakeReplications_result : TBase
      {

        public MakeReplications_result()
        {
        }

        public MakeReplications_result DeepCopy()
        {
          var tmp14 = new MakeReplications_result();
          return tmp14;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp15 = new TStruct("MakeReplications_result");
            await oprot.WriteStructBeginAsync(tmp15, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MakeReplications_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp16 = new StringBuilder("MakeReplications_result(");
          tmp16.Append(')');
          return tmp16.ToString();
        }
      }

    }

  }
}
